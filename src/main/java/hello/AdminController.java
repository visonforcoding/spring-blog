package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import hello.Admin;
import hello.AdminRepository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/admin") // This means URL's start with /demo (after Application path)
public class AdminController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AdminRepository adminRepository;


    @GetMapping(path = "/add")
    public String add() {
        return "admin/add";
    }

    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ResponseBody
    public Res addNewUser(@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Admin n = new Admin();
        n.setName(name);
        n.setEmail(email);
        adminRepository.save(n);
        HashMap data = new HashMap();
        data.put("foo", "bar");
        return new Res(1, "添加成功", data);
    }

    @GetMapping(path = "/list")
    public String list() {
        return "admin/list";
    }

    @GetMapping(path = "get_list")
    @ResponseBody
    public DataResponse<Admin> getAdminList(
            Admin adminReq,
            @RequestParam(defaultValue = "1", value = "page") String page,
            @RequestParam(defaultValue = "10", value = "rows") String rows) {
        long adminCount;
        String total; //页数
        Iterable<Admin> admins;
        int records;
        adminCount = adminRepository.count();
        records = (int) adminCount;
        admins = adminRepository.findAll();
        int pageSize = Integer.valueOf(rows);
        total = Integer.toString((records + pageSize - 1) / pageSize);
        DataResponse<Admin> response = new DataResponse<>();
        List<Admin> adminList = new ArrayList<>();
        admins.forEach(admin -> adminList.add(admin));
        response.setTotal(total);
        response.setRows(adminList);
        response.setPage(page);
        response.setRecords(records);
        return response;
    }


}